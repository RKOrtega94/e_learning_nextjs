// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model Role {
  id             Int              @id @default(autoincrement())
  name           String
  RolePermission RolePermission[]
  UserRoles      UserRoles[]
}

model Permission {
  id             Int              @id @default(autoincrement())
  name           String
  RolePermission RolePermission[]
}

model RolePermission {
  id           Int        @id @default(autoincrement())
  role         Role       @relation(fields: [roleId], references: [id])
  roleId       Int
  permission   Permission @relation(fields: [permissionId], references: [id])
  permissionId Int
}

model User {
  id        String     @id @default(uuid())
  firstName String
  lastName  String
  email     String     @unique
  document  String     @unique
  password  String
  Students  Students[]
}

model UserRoles {
  id     Int    @id @default(autoincrement())
  userId String
  role   Role   @relation(fields: [roleId], references: [id])
  roleId Int
}

model Classroom {
  id        String     @id @default(uuid())
  name      String
  capacity  Int?
  code      String
  cover     String?
  status    Boolean    @default(true)
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
  deletedAt DateTime?
  resources Resource[]
  students  Students[]

  @@unique([name, code], name: "classroom_unique")
}

model ResourceType {
  id          String     @id @default(uuid())
  name        String
  description String?
  icon        String?
  state       Boolean    @default(true)
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
  deletedAt   DateTime?
  resource    Resource[]
}

model Resource {
  id          String       @id @default(uuid())
  name        String
  description String?
  type        ResourceType @relation(fields: [typeId], references: [id])
  typeId      String
  classroom   Classroom    @relation(fields: [classroomId], references: [id])
  classroomId String
  status      Boolean      @default(true)
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
  deletedAt   DateTime?

  @@unique([typeId, classroomId], name: "resource_unique")
  @@index([typeId], name: "typeId")
}

model Students {
  id          String    @id @default(uuid())
  classroom   Classroom @relation(fields: [classroomId], references: [id])
  classroomId String
  user        User      @relation(fields: [userId], references: [id])
  userId      String
  status      Boolean   @default(true)
}
